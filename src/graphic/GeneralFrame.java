/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphic;

import java.awt.BorderLayout;
import java.awt.Color;
import static java.awt.Color.RED;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author Алексей
 */
public class GeneralFrame extends javax.swing.JFrame {

    /**
     * Creates new form GeneralFrame
     */
    private Model model = new Model(0, 0, 0);
    private List<Model> models = new ArrayList<>();
    private int number = 0;
    
    public GeneralFrame() {
        initComponents();
        setPaint();
        setKeyListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(92, 92, 92))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeneralFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeneralFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeneralFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneralFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeneralFrame().setVisible(true);
            }
        });
    }
    
    double x = 0, y = 0, z = 0;
    double cameraX = 0, cameraY = 0, cameraZ = 0;
    double dx = 0, dy = 0, dz = 0;
    double angleX = 0, angleY = 0, angleZ = 0;
    
    private void setKeyListener(){
        this.setFocusable(true);
        this.addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyPressed(KeyEvent e) {
                System.out.println(e.getKeyCode());
                switch (e.getKeyCode()) {
                    case 49:
                        model = models.get(number%models.size());
                        
                        number++;
                        break;
                    case 87:
                        model.worldX += 1;
                        break;
                    case 83:
                        model.worldX -= 1;
                        break;
                    case 39:
                        model.angleY -= 1;
                        break;
                    case 37:
                        model.angleY += 1;
                        break;
                    case 38:
                        model.angleX += 1;
                        break;
                    case 40:
                        model.angleX -= 1;
                        break;
                    case 100:
                        dx -= 1;
                        cameraX -= 1;
                        break;
                    case 102:
                        dx += 1;
                        cameraX += 1;
                        break;
                    case 104:
                        dy -= 1;
                        cameraY -= 1;
                        break;
                    case 98:
                        dy += 1;
                        cameraY += 1;
                        break;
                    case 109:
                        model.dx -= 0.1;
                        model.dy -= 0.1;
                        model.dz -= 0.1;
                        dz -= 1;
                        cameraZ -= 1;
                        break;
                    case 107:
                        model.dx += 0.1;
                        model.dy += 0.1;
                        model.dz += 0.1;
                        dz += 1;
                        cameraZ += 1;
                        break;
                    case 105:
                        model.angleZ++;
                        break;
                    case 103:
                        model.angleZ--;
                        break;
                    case 33: 
                        break;
                    default:
                        return;
                }
                
                jPanel1.repaint();
                
            }

            @Override
            public void keyReleased(KeyEvent e) {
                
// throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        
        jPanel1.addMouseListener(new MouseListener(){
            @Override
            public void mouseClicked(MouseEvent e) {
                System.out.println(e.getX() + " " + e.getY());
                models.add(new Model(e.getX(), e.getY(), 0));
                jPanel1.repaint();
            }

            @Override
            public void mousePressed(MouseEvent e) {
              //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseEntered(MouseEvent e) {
               // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseExited(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
        });
    }
    
    private void setPaint(){
        
        Container pane = this.jPanel1;
        
        pane.setLayout(new BorderLayout());
        jPanel1 = new JPanel(){

            @Override
            public void setSize(int width, int height) {
                super.setSize(width, height); //To change body of generated methods, choose Tools | Templates.
            }
            @Override
            public void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setColor(Color.lightGray);
                g2.fillRect(0, 0, getWidth(), getHeight());
                double rAngleX = Math.toRadians(cameraX);
                double rAngleY = Math.toRadians(cameraY);
                double rAngleZ = Math.toRadians(cameraZ);
           //     rAngleX = 0;
           //     rAngleY = 0;
           // /    rAngleZ = 0;
            //    Matrix3.getRotateСam(rAngleX, rAngleY, rAngleZ);
               // List <Model> newModels = new ArrayList<>();
                if( !models.isEmpty() ){
                   
                    g2.drawImage(Render.getImage(models, getHeight(), getWidth(), 
                            Matrix3.getCam(cameraX, cameraY, cameraZ, rAngleX, rAngleY, rAngleZ) ), 0, 0, null);

                    //  angleX = angleY = angleZ = 0;
                }
            }
        };
        pane.add(jPanel1, BorderLayout.CENTER);

        this.setFocusable(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
